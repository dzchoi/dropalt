-- Script for the "keymap" module

-- Compile this script and download the generated bytecode to the keyboard using:
-- $ daluac keymap.lua >keymap.bin && dfu-util -a1 -D keymap.bin

-- Only the base and package modules are preloaded and registered in the global
-- environment. We need to explicitly "require" for the "fw" module.
local fw = require "fw"

-- Note: Any runtime error in this script will cause a crash during the firmware boot.
-- For example, the package module does not define non_existent_function() and thus
-- package.non_existent_function("nop") will cause a crash!


-- Create a keymap table based on the given template.
local function keymap_table(template)
    local table = {}
    for i = 0, #template do
        if type(template[i]) == "string" then
            -- Literal
            local keycode = fw.keycode(template[i])
            assert( keycode, "no keycode for \"" .. template[i] .. "\"" )
            table[i] = fw.map_literal(keycode)
        else
            -- Instance of map_t or a derived class of map_t
            assert( type(template[i]) == "userdata" )
            table[i] = template[i]
        end
    end

    return table
end

-- Define custom keymaps.
local ___ = fw.map_pseudo()
local FN  = fw.map_pseudo()

local SPC = fw.map_literal(fw.keycode("SPACE"))
-- E.g. we can call `SPC:is_pressed()`.

-- Create the module table.
local keymaps = keymap_table {
    [0]="`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "BKSP", "HOME",
    "TAB", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]", "\\", "END",
    "LCTRL", "A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'", ___, "ENTER", "PGUP",
    "LSHIFT", ___, "Z", "X", "C", "V", "B", "N", "M", ",", ".", "/", "RSHIFT", "UP", "PGDN",
    "LALT", "LGUI", FN, ___, ___, ___, SPC, ___, ___, ___, "RCTRL", "RALT", "LEFT", "DOWN", "RIGHT"
}


-- It is necessary to manually assign the module table to package.loaded["keymap"],
-- as this module will be loaded using a simplified version of require() provided by
-- the firmware.
package.loaded[...] = keymaps  -- The vararg (...) resolves to the module name "keymap".

-- Output the memory usage after the module table has been completely populated.
print("Current Lua memory usage (KB):", collectgarbage("count"))

return keymaps
